// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('mongodbVSCodePlaygroundDB');

const reset = ()=>{
db.sales.drop();

// Insert a few documents into the sales collection.
db.sales.insertMany([
  { '_id': 1, 'item': 'abc', 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
  { '_id': 2, 'item': 'jkl', 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
  { '_id': 3, 'item': 'xyz', 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
  { '_id': 4, 'item': 'xyz', 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
  { '_id': 5, 'item': 'abc', 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
  { '_id': 6, 'item': 'def', 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
  { '_id': 7, 'item': 'def', 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
  { '_id': 8, 'item': 'abc', 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
]);

}
// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.

// db.<colleactioName>.<operation>
// SELECT * FROM TABLE
// db.sales.find();

// 2 params - filter, projection
// db.sales.find({item:'abc'},{_id:0,date:0});
// db.sales.find({item:'abc'},{_id:0,item:1,price:1});


// operators
// $lt - less than
// $lte - <=
// $gt - >
// $gte - >=

// db.sales.find({'quantity': {$lte:5}},{_id:0,date:0})
// all items bw 5<=qty<=10

db.sales.find({'quantity': {$gte:5,$lte:10}},{_id:0,date:0});


// $and, $or

// all items bw 5<=qty<=10
// or price > 5
// {'quantity': {$gte:5,$lte:10}
// {price:{$gt:5}}

db.sales.find(
  {
    $or:[
      {'quantity': {$gte:5,$lte:10}},
      {price:{$gt:5}}
    ]
  }
  ,
{_id:0,date:0}
);

db.sales.find(
  {
    $and:[
      {'quantity': {$gte:5,$lte:10}},
      {price:{$gt:5}}
    ]
  }
  ,
{_id:0,date:0}
);

// exactly same as above, short hand for writing $and operator
// db.sales.find(
//   {'quantity': {$gte:5,$lte:10}, {price:{$gt:5}}}
//   ,
// {_id:0,date:0}
// );

// update queries

// filter, what to update
// for item->jkl
// db.sales.findOne({item:"jkl"});
// db.sales.updateMany({item:'jkl'},{
//   $set:{quantity:10}
// });
db.sales.find({item:'jkl'});

// $mul - multiply 
// $inc - to increment a value
// all the items where qty <=5 order 5 more


// 10% discount on all items priced >=10

// db.sales.updateMany({price:{$gte:10}} , {$mul:{price:0.9}})
// reset()
// db.sales.updateMany({} , {$inc:{quantity:5}})
// db.sales.find({},{_id:0,date:0});


// array operators - 
// $pop - removes the last index -1 to remove the first element, 1 tp remove the last
// $push - pushed element at the end of array
// $pull - remove an item from array
// $pullAll - takes array as argument, removes all the arguments present
// $addToSet - only pushes if entry is not there

// db.sales.insertOne({_id:10,item:['abc','def']});

// add 'xyz' to list of items


// remove last element
// db.sales.updateOne({_id:10},{$pop:{item:1}})
// db.sales.updateOne({_id:10},{$push:{item:'xyz'}})
// db.sales.updateOne({_id:10},{$pull:{item:'xyz'}});
// db.sales.updateOne({_id:10},{$pullAll:{item:['xyz','abc']}});
// db.sales.updateOne({_id:10},{$addToSet:{item:'xyz'}});
// db.sales.updateOne({_id:10},{$addToSet:{item:'xyz'}});
// db.sales.updateOne({_id:10},{$addToSet:{item:'xyz'}});
// db.sales.updateOne({_id:10},{$addToSet:{item:'xyz'}});

// db.sales.deleteOne({_id:10})
// db.sales.findOne({_id:10})

db.sales.updateOne({_id:9},{$set:{'quantity':10}},);
db.sales.find();